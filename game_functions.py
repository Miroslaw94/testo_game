import sys
from time import sleep

import pygame

from bullet import Bullet
from button import Button
from alien import Alien
from sound import Sound
from text_frame import TextFrame


def check_keydown_events(event, ai_settings, screen, stats, ship, bullets):
    if event.key == pygame.K_RIGHT:
        ship.moving_right = True
    elif event.key == pygame.K_LEFT:
        ship.moving_left = True
    elif event.key == pygame.K_UP:
        ship.moving_up = True
    elif event.key == pygame.K_DOWN:
        ship.moving_down = True
    elif event.key == pygame.K_SPACE:
        fire_bullet(ai_settings, screen, ship, bullets)
    elif event.key == pygame.K_q:
        stats.save_high_scores()
        sys.exit()


def check_keyup_events(event, ship):
    if event.key == pygame.K_RIGHT:
        ship.moving_right = False
    elif event.key == pygame.K_LEFT:
        ship.moving_left = False
    elif event.key == pygame.K_UP:
        ship.moving_up = False
    elif event.key == pygame.K_DOWN:
        ship.moving_down = False


def check_events(ai_settings, screen, stats, sb, play_button, highscores_button, reset_button, ship, aliens, bullets):
    """Reaction for events generated by keyboard and mouse."""
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            stats.save_high_scores()
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event, ai_settings, screen, stats, ship, bullets)
        elif event.type == pygame.KEYUP:
            check_keyup_events(event, ship)
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            check_play_button(ai_settings, screen, stats, sb, play_button, ship, aliens, bullets, mouse_x, mouse_y)
            check_highscores_button(screen, stats, highscores_button, mouse_x, mouse_y)
            check_reset_button(stats, reset_button, mouse_x, mouse_y)


def check_play_button(ai_settings, screen, stats, sb, play_button, ship, aliens, bullets, mouse_x, mouse_y):
    """Starts new game after clicking a button."""
    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)
    if button_clicked and stats.main_buttons_active and not stats.game_active:
        stats.main_buttons_active = False
        easy_button = Button(screen, 300, "Easy")
        normal_button = Button(screen, 370, "Normal")
        hard_button = Button(screen, 440, "Hard")
        easy_button.draw_button()
        normal_button.draw_button()
        hard_button.draw_button()
        pygame.display.flip()
        pygame.event.wait()
        pygame.event.set_blocked(pygame.MOUSEMOTION)
        event = pygame.event.wait()
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            check_difficulty_buttons(ai_settings, screen, stats, sb, easy_button, normal_button, hard_button,
                                     ship, aliens, bullets, mouse_x, mouse_y)


def check_difficulty_buttons(ai_settings, screen, stats, sb, easy_button, normal_button, hard_button,
                             ship, aliens, bullets, mouse_x, mouse_y):
    easy_button_clicked = easy_button.rect.collidepoint(mouse_x, mouse_y)
    normal_button_clicked = normal_button.rect.collidepoint(mouse_x, mouse_y)
    hard_button_clicked = hard_button.rect.collidepoint(mouse_x, mouse_y)
    if easy_button_clicked and not stats.game_active:
        print("Easy")
        stats.game_difficulty = "easy"
        start_game(ai_settings, screen, stats, sb, ship, aliens, bullets)
    elif normal_button_clicked and not stats.game_active:
        print("Normal")
        stats.game_difficulty = "normal"
        start_game(ai_settings, screen, stats, sb, ship, aliens, bullets)
    elif hard_button_clicked and not stats.game_active:
        print("Hard")
        stats.game_difficulty = "hard"
        start_game(ai_settings, screen, stats, sb, ship, aliens, bullets)


def start_game(ai_settings, screen, stats, sb, ship, aliens, bullets):
    music = Sound()
    stats.reset_stats()
    stats.game_active = True
    sb.prep_score()
    sb.prep_level()
    sb.prep_ships()
    music.play_music()
    aliens.empty()
    bullets.empty()
    ai_settings.initialize_dynamic_settings()
    pygame.mouse.set_visible(False)
    create_fleet(ai_settings, screen, stats, ship, aliens)
    ship.center_ship()


def check_highscores_button(screen, stats, highscores_button, mouse_x, mouse_y):
    button_clicked = highscores_button.rect.collidepoint(mouse_x, mouse_y)
    text_frame = TextFrame(screen, stats)
    clock = pygame.time.Clock()
    if button_clicked and stats.main_buttons_active and not stats.game_active:
        text_frame.draw_frame()
        pygame.display.update()
        clock.tick(0.4)


def check_reset_button(stats, reset_button, mouse_x, mouse_y):
    button_clicked = reset_button.rect.collidepoint(mouse_x, mouse_y)
    if button_clicked and stats.main_buttons_active and not stats.game_active:
        stats.high_score = [0, 0, 0, 0, 0]


def update_bullets(ai_settings, screen, stats, sb, ship, aliens, bullets):
    """Update of position of bullets and deleting out-of-window bullets."""
    bullets.update()
    for bullet in bullets.copy():
        if bullet.rect.bottom <= 0:
            bullets.remove(bullet)
    check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets)


def fire_bullet(ai_settings, screen, ship, bullets):
    if len(bullets) < ai_settings.bullets_allowed:
        new_bullet = Bullet(ai_settings, screen, ship)
        bullets.add(new_bullet)


def check_bullet_alien_collisions(ai_settings, screen, stats, sb, ship, aliens, bullets):
    """Reaction for collisions between bullet and alien."""
    collisions = pygame.sprite.groupcollide(bullets, aliens, True, True)
    sound = Sound()
    if collisions:
        for aliens in collisions.values():
            stats.score += ai_settings.alien_points
            sb.prep_score()
    if len(aliens) == 0:
        sound.play_sound_win()
        bullets.empty()
        ai_settings.increase_speed()
        stats.level += 1
        sb.prep_level()
        create_fleet(ai_settings, screen, stats, ship, aliens)


def check_high_score(stats):
    """Checks whether we have achieved new high score."""
    if stats.score > min(stats.high_score):
        stats.high_score.append(stats.score)
        stats.high_score.sort(reverse=True)
        del stats.high_score[5]


def update_screen(ai_settings, screen, stats, sb, play_button, highscores_button, reset_button, ship, aliens, bullets):
    """Actualisation of images on screen."""
    screen.fill(ai_settings.bg_color)
    sb.show_score()
    for bullet in bullets.sprites():
        bullet.draw_bullet()
    ship.blitme()
    aliens.draw(screen)
    if not stats.game_active:
        play_button.draw_button()
        highscores_button.draw_button()
        reset_button.draw_button()
    pygame.display.flip()


def get_number_aliens_x(ai_settings, alien_width):
    """Determine how many aliens will fit in a row."""
    available_space_x = ai_settings.screen_width - 2 * alien_width
    number_aliens_x = int(available_space_x / (2 * alien_width))
    return number_aliens_x


def create_alien(ai_settings, screen, stats, aliens, alien_number, row_number):
    """Create alien and put him in row."""
    alien = Alien(ai_settings, screen, stats)
    alien_width = alien.rect.width
    alien.x = alien_width + 2 * alien_width * alien_number
    alien.rect.x = alien.x - 20
    alien.rect.y = alien.rect.height + 2 * alien.rect.height * row_number
    aliens.add(alien)


def create_fleet(ai_settings, screen, stats, ship, aliens):
    """Create fleet of aliens."""
    alien = Alien(ai_settings, screen, stats)
    number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width)
    number_rows = get_number_rows(ai_settings, ship.rect.height, alien.rect.height)
    for row_number in range(number_rows):
        for alien_number in range(number_aliens_x):
            create_alien(ai_settings, screen, stats, aliens, alien_number, row_number)


def get_number_rows(ai_settings, ship_height, alien_height):
    """Determine how many rows of aliens will fit on the screen."""
    available_space_y = ai_settings.screen_height - 3 * alien_height - ship_height
    number_rows = int(available_space_y / (2 * alien_height))
    return number_rows


def check_fleet_edges(ai_settings, aliens):
    """Reacts when alien reaches to edge of the screen."""
    for alien in aliens.sprites():
        if alien.check_edges():
            change_fleet_direction(ai_settings, aliens)
            break


def change_fleet_direction(ai_settings, aliens):
    """Moves fleet down and changes direction."""
    for alien in aliens.sprites():
        alien.rect.y += ai_settings.fleet_drop_speed
    ai_settings.fleet_direction *= -1


def ship_hit(ai_settings, stats, screen, sb, ship, aliens, bullets):
    """Reaction for collision of ship and alien."""
    sound = Sound()
    if stats.ships_left > 0:
        sound.play_sound_loose()
        stats.ships_left -= 1
        aliens.empty()
        bullets.empty()
        create_fleet(ai_settings, screen, stats, ship, aliens)
        sb.prep_ships()
        ship.center_ship()
        sleep(0.3)
    else:
        pygame.mixer.music.stop()
        sound.play_sound_defeated()
        stats.game_active = False
        stats.main_buttons_active = True
        check_high_score(stats)
        pygame.mouse.set_visible(True)


def check_aliens_bottom(ai_settings, stats, screen, sb, ship, aliens, bullets):
    """Checks if one of the aliens touched bottom edge of the screen."""
    screen_rect = screen.get_rect()
    for alien in aliens.sprites():
        if alien.rect.bottom >= screen_rect.bottom:
            ship_hit(ai_settings, stats, screen, sb, ship, aliens, bullets)
            break


def update_aliens(ai_settings, stats, screen, sb, ship, aliens, bullets):
    """Updates positions of all aliens in fleet."""
    check_fleet_edges(ai_settings, aliens)
    aliens.update()
    if pygame.sprite.spritecollideany(ship, aliens):
        ship_hit(ai_settings, stats, screen, sb, ship, aliens, bullets)
    check_aliens_bottom(ai_settings, stats, screen, sb, ship, aliens, bullets)

